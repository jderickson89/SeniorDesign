
Senior Design.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000156  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b34  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000972  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000349  00000000  00000000  000016e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ec  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ec  00000000  00000000  00001f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00002028  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  c4:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:
#define ENB 128;

// -------- Functions -------- //
static inline void motorInit(){
	// ---- L298 INPUT Set Up ---- //
		DDRB |= 0b00111001;				// Set PB0,PB3,PB4,PB5 as output
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	89 63       	ori	r24, 0x39	; 57
  d0:	84 b9       	out	0x04, r24	; 4
		
	// ---- L298 ENABLE Set Up --- //
		DDRB |= 0b00000110;				//Set pins PB1 and PB2 as OUTPUT
  d2:	84 b1       	in	r24, 0x04	; 4
  d4:	86 60       	ori	r24, 0x06	; 6
  d6:	84 b9       	out	0x04, r24	; 4
		TCCR1A = 0b11110001;			//Configure timer 1 for fast PWM
  d8:	81 ef       	ldi	r24, 0xF1	; 241
  da:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		TCCR1B = 0b00000010;
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		TCCR1C = 0b00000000;
  e4:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
		OCR1A = 0;
  e8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  ec:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = 0;
  f0:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  f4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		  else{	PORTB &= ~(1 << PINB4); }
			  
	if(INPUT4){ PORTB |=  (1 << PINB5); }
		  else{	PORTB &= ~(1 << PINB5); }
			  
	OCR1A = ENABLEA;
  f8:	a8 e8       	ldi	r26, 0x88	; 136
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	20 e8       	ldi	r18, 0x80	; 128
  fe:	30 e0       	ldi	r19, 0x00	; 0
	OCR1B = ENABLEB; 
 100:	ea e8       	ldi	r30, 0x8A	; 138
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	90 e0       	ldi	r25, 0x00	; 0
		OCR1B = 0;

}
static inline void setBridgeState(uint8_t INPUT1,uint8_t INPUT2, uint8_t INPUT3, uint8_t INPUT4,uint8_t ENABLEA, uint8_t ENABLEB){

	if(INPUT1){ PORTB |=  (1 << PINB0); }
 108:	28 9a       	sbi	0x05, 0	; 5
		  else{	PORTB &= ~(1 << PINB0); }
			  
	if(INPUT2){ PORTB |=  (1 << PINB3); }
		  else{	PORTB &= ~(1 << PINB3); }
 10a:	2b 98       	cbi	0x05, 3	; 5
			  
	if(INPUT3){ PORTB |=  (1 << PINB4); }
		  else{	PORTB &= ~(1 << PINB4); }
 10c:	2c 98       	cbi	0x05, 4	; 5
			  
	if(INPUT4){ PORTB |=  (1 << PINB5); }
		  else{	PORTB &= ~(1 << PINB5); }
 10e:	2d 98       	cbi	0x05, 5	; 5
			  
	OCR1A = ENABLEA;
 110:	11 96       	adiw	r26, 0x01	; 1
 112:	3c 93       	st	X, r19
 114:	2e 93       	st	-X, r18
	OCR1B = ENABLEB; 
 116:	91 83       	std	Z+1, r25	; 0x01
 118:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	4f e9       	ldi	r20, 0x9F	; 159
 11c:	56 e8       	ldi	r21, 0x86	; 134
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	41 50       	subi	r20, 0x01	; 1
 122:	50 40       	sbci	r21, 0x00	; 0
 124:	60 40       	sbci	r22, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x54>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x5e>
 12a:	00 00       	nop

}
static inline void setBridgeState(uint8_t INPUT1,uint8_t INPUT2, uint8_t INPUT3, uint8_t INPUT4,uint8_t ENABLEA, uint8_t ENABLEB){

	if(INPUT1){ PORTB |=  (1 << PINB0); }
		  else{	PORTB &= ~(1 << PINB0); }
 12c:	28 98       	cbi	0x05, 0	; 5
			  
	if(INPUT2){ PORTB |=  (1 << PINB3); }
 12e:	2b 9a       	sbi	0x05, 3	; 5
		  else{	PORTB &= ~(1 << PINB3); }
			  
	if(INPUT3){ PORTB |=  (1 << PINB4); }
		  else{	PORTB &= ~(1 << PINB4); }
 130:	2c 98       	cbi	0x05, 4	; 5
			  
	if(INPUT4){ PORTB |=  (1 << PINB5); }
		  else{	PORTB &= ~(1 << PINB5); }
 132:	2d 98       	cbi	0x05, 5	; 5
			  
	OCR1A = ENABLEA;
 134:	11 96       	adiw	r26, 0x01	; 1
 136:	3c 93       	st	X, r19
 138:	2e 93       	st	-X, r18
	OCR1B = ENABLEB; 
 13a:	91 83       	std	Z+1, r25	; 0x01
 13c:	80 83       	st	Z, r24
 13e:	4f e9       	ldi	r20, 0x9F	; 159
 140:	56 e8       	ldi	r21, 0x86	; 134
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	41 50       	subi	r20, 0x01	; 1
 146:	50 40       	sbci	r21, 0x00	; 0
 148:	60 40       	sbci	r22, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0x78>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x82>
 14e:	00 00       	nop
 150:	db cf       	rjmp	.-74     	; 0x108 <main+0x3c>

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
