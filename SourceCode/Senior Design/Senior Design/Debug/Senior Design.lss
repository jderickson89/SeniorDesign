
Senior Design.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000212  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e6e  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000980  00000000  00000000  00001166  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044c  00000000  00000000  00001ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001f34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ec  00000000  00000000  00001f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000049e  00000000  00000000  00002444  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000028e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  c4:	0c 94 07 01 	jmp	0x20e	; 0x20e <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:
#define ENB 128;

// -------- Functions -------- //
static inline void motorInit(){
	// ---- L298 INPUT Set Up ---- //
		DDRB |= 0b00111001;				// Set PB0,PB3,PB4,PB5 as output
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	89 63       	ori	r24, 0x39	; 57
  d0:	84 b9       	out	0x04, r24	; 4
		
	// ---- L298 ENABLE Set Up --- //
		DDRB |= 0b00000110;				//Set pins PB1 and PB2 as OUTPUT
  d2:	84 b1       	in	r24, 0x04	; 4
  d4:	86 60       	ori	r24, 0x06	; 6
  d6:	84 b9       	out	0x04, r24	; 4
		TCCR1A = 0b11110001;			//Configure timer 1 for fast PWM
  d8:	81 ef       	ldi	r24, 0xF1	; 241
  da:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		TCCR1B = 0b00000010;
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		TCCR1C = 0b00000000;
  e4:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
		OCR1A = 0;
  e8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  ec:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = 0;
  f0:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  f4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		  else{	PORTB &= ~(1 << PINB4); }
			  
	if(INPUT4){ PORTB |=  (1 << PINB5); }
		  else{	PORTB &= ~(1 << PINB5); }
			  
	OCR1A = ENABLEA;
  f8:	a8 e8       	ldi	r26, 0x88	; 136
  fa:	b0 e0       	ldi	r27, 0x00	; 0
	OCR1B = ENABLEB; 
  fc:	ea e8       	ldi	r30, 0x8A	; 138
  fe:	f0 e0       	ldi	r31, 0x00	; 0
		  else{	PORTB &= ~(1 << PINB4); }
			  
	if(INPUT4){ PORTB |=  (1 << PINB5); }
		  else{	PORTB &= ~(1 << PINB5); }
			  
	OCR1A = ENABLEA;
 100:	80 e2       	ldi	r24, 0x20	; 32
 102:	90 e0       	ldi	r25, 0x00	; 0
	OCR1B = ENABLEB; 


}

int main(void){
 104:	29 e1       	ldi	r18, 0x19	; 25
 106:	30 e0       	ldi	r19, 0x00	; 0
		OCR1B = 0;

}
static inline void setBridgeState(uint8_t INPUT1,uint8_t INPUT2, uint8_t INPUT3, uint8_t INPUT4,uint8_t ENABLEA, uint8_t ENABLEB){

	if(INPUT1){ PORTB |=  (1 << PINB0); }
 108:	28 9a       	sbi	0x05, 0	; 5
		  else{	PORTB &= ~(1 << PINB0); }
			  
	if(INPUT2){ PORTB |=  (1 << PINB3); }
		  else{	PORTB &= ~(1 << PINB3); }
 10a:	2b 98       	cbi	0x05, 3	; 5
			  
	if(INPUT3){ PORTB |=  (1 << PINB4); }
 10c:	2c 9a       	sbi	0x05, 4	; 5
		  else{	PORTB &= ~(1 << PINB4); }
			  
	if(INPUT4){ PORTB |=  (1 << PINB5); }
		  else{	PORTB &= ~(1 << PINB5); }
 10e:	2d 98       	cbi	0x05, 5	; 5
			  
	OCR1A = ENABLEA;
 110:	11 96       	adiw	r26, 0x01	; 1
 112:	9c 93       	st	X, r25
 114:	8e 93       	st	-X, r24
	OCR1B = ENABLEB; 
 116:	91 83       	std	Z+1, r25	; 0x01
 118:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	cf e4       	ldi	r28, 0x4F	; 79
 11c:	d3 ec       	ldi	r29, 0xC3	; 195
 11e:	21 97       	sbiw	r28, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x52>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x58>
 124:	00 00       	nop

}
static inline void setBridgeState(uint8_t INPUT1,uint8_t INPUT2, uint8_t INPUT3, uint8_t INPUT4,uint8_t ENABLEA, uint8_t ENABLEB){

	if(INPUT1){ PORTB |=  (1 << PINB0); }
		  else{	PORTB &= ~(1 << PINB0); }
 126:	28 98       	cbi	0x05, 0	; 5
			  
	if(INPUT2){ PORTB |=  (1 << PINB3); }
 128:	2b 9a       	sbi	0x05, 3	; 5
		  else{	PORTB &= ~(1 << PINB3); }
			  
	if(INPUT3){ PORTB |=  (1 << PINB4); }
 12a:	2c 9a       	sbi	0x05, 4	; 5
		  else{	PORTB &= ~(1 << PINB4); }
			  
	if(INPUT4){ PORTB |=  (1 << PINB5); }
		  else{	PORTB &= ~(1 << PINB5); }
 12c:	2d 98       	cbi	0x05, 5	; 5
			  
	OCR1A = ENABLEA;
 12e:	11 96       	adiw	r26, 0x01	; 1
 130:	9c 93       	st	X, r25
 132:	8e 93       	st	-X, r24
	OCR1B = ENABLEB; 
 134:	91 83       	std	Z+1, r25	; 0x01
 136:	80 83       	st	Z, r24
 138:	cf e4       	ldi	r28, 0x4F	; 79
 13a:	d3 ec       	ldi	r29, 0xC3	; 195
 13c:	21 97       	sbiw	r28, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x70>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x76>
 142:	00 00       	nop

}
static inline void setBridgeState(uint8_t INPUT1,uint8_t INPUT2, uint8_t INPUT3, uint8_t INPUT4,uint8_t ENABLEA, uint8_t ENABLEB){

	if(INPUT1){ PORTB |=  (1 << PINB0); }
		  else{	PORTB &= ~(1 << PINB0); }
 144:	28 98       	cbi	0x05, 0	; 5
			  
	if(INPUT2){ PORTB |=  (1 << PINB3); }
 146:	2b 9a       	sbi	0x05, 3	; 5
		  else{	PORTB &= ~(1 << PINB3); }
			  
	if(INPUT3){ PORTB |=  (1 << PINB4); }
		  else{	PORTB &= ~(1 << PINB4); }
 148:	2c 98       	cbi	0x05, 4	; 5
			  
	if(INPUT4){ PORTB |=  (1 << PINB5); }
 14a:	2d 9a       	sbi	0x05, 5	; 5
		  else{	PORTB &= ~(1 << PINB5); }
			  
	OCR1A = ENABLEA;
 14c:	11 96       	adiw	r26, 0x01	; 1
 14e:	9c 93       	st	X, r25
 150:	8e 93       	st	-X, r24
	OCR1B = ENABLEB; 
 152:	91 83       	std	Z+1, r25	; 0x01
 154:	80 83       	st	Z, r24
 156:	cf e4       	ldi	r28, 0x4F	; 79
 158:	d3 ec       	ldi	r29, 0xC3	; 195
 15a:	21 97       	sbiw	r28, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <main+0x8e>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0x94>
 160:	00 00       	nop
		OCR1B = 0;

}
static inline void setBridgeState(uint8_t INPUT1,uint8_t INPUT2, uint8_t INPUT3, uint8_t INPUT4,uint8_t ENABLEA, uint8_t ENABLEB){

	if(INPUT1){ PORTB |=  (1 << PINB0); }
 162:	28 9a       	sbi	0x05, 0	; 5
		  else{	PORTB &= ~(1 << PINB0); }
			  
	if(INPUT2){ PORTB |=  (1 << PINB3); }
		  else{	PORTB &= ~(1 << PINB3); }
 164:	2b 98       	cbi	0x05, 3	; 5
			  
	if(INPUT3){ PORTB |=  (1 << PINB4); }
		  else{	PORTB &= ~(1 << PINB4); }
 166:	2c 98       	cbi	0x05, 4	; 5
			  
	if(INPUT4){ PORTB |=  (1 << PINB5); }
 168:	2d 9a       	sbi	0x05, 5	; 5
		  else{	PORTB &= ~(1 << PINB5); }
			  
	OCR1A = ENABLEA;
 16a:	11 96       	adiw	r26, 0x01	; 1
 16c:	9c 93       	st	X, r25
 16e:	8e 93       	st	-X, r24
	OCR1B = ENABLEB; 
 170:	91 83       	std	Z+1, r25	; 0x01
 172:	80 83       	st	Z, r24
 174:	cf e4       	ldi	r28, 0x4F	; 79
 176:	d3 ec       	ldi	r29, 0xC3	; 195
 178:	21 97       	sbiw	r28, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0xac>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0xb2>
 17e:	00 00       	nop
 180:	21 50       	subi	r18, 0x01	; 1
 182:	31 09       	sbc	r19, r1
int main(void){
	
	motorInit();
				
	while(1){
		for(int i = 0; i < 25 ; i++){
 184:	09 f0       	breq	.+2      	; 0x188 <main+0xbc>
 186:	c0 cf       	rjmp	.-128    	; 0x108 <main+0x3c>
 188:	29 e1       	ldi	r18, 0x19	; 25
 18a:	30 e0       	ldi	r19, 0x00	; 0

}
static inline void setBridgeState(uint8_t INPUT1,uint8_t INPUT2, uint8_t INPUT3, uint8_t INPUT4,uint8_t ENABLEA, uint8_t ENABLEB){

	if(INPUT1){ PORTB |=  (1 << PINB0); }
		  else{	PORTB &= ~(1 << PINB0); }
 18c:	28 98       	cbi	0x05, 0	; 5
			  
	if(INPUT2){ PORTB |=  (1 << PINB3); }
 18e:	2b 9a       	sbi	0x05, 3	; 5
		  else{	PORTB &= ~(1 << PINB3); }
			  
	if(INPUT3){ PORTB |=  (1 << PINB4); }
		  else{	PORTB &= ~(1 << PINB4); }
 190:	2c 98       	cbi	0x05, 4	; 5
			  
	if(INPUT4){ PORTB |=  (1 << PINB5); }
 192:	2d 9a       	sbi	0x05, 5	; 5
		  else{	PORTB &= ~(1 << PINB5); }
			  
	OCR1A = ENABLEA;
 194:	11 96       	adiw	r26, 0x01	; 1
 196:	9c 93       	st	X, r25
 198:	8e 93       	st	-X, r24
	OCR1B = ENABLEB; 
 19a:	91 83       	std	Z+1, r25	; 0x01
 19c:	80 83       	st	Z, r24
 19e:	cf e4       	ldi	r28, 0x4F	; 79
 1a0:	d3 ec       	ldi	r29, 0xC3	; 195
 1a2:	21 97       	sbiw	r28, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0xd6>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0xdc>
 1a8:	00 00       	nop

}
static inline void setBridgeState(uint8_t INPUT1,uint8_t INPUT2, uint8_t INPUT3, uint8_t INPUT4,uint8_t ENABLEA, uint8_t ENABLEB){

	if(INPUT1){ PORTB |=  (1 << PINB0); }
		  else{	PORTB &= ~(1 << PINB0); }
 1aa:	28 98       	cbi	0x05, 0	; 5
			  
	if(INPUT2){ PORTB |=  (1 << PINB3); }
 1ac:	2b 9a       	sbi	0x05, 3	; 5
		  else{	PORTB &= ~(1 << PINB3); }
			  
	if(INPUT3){ PORTB |=  (1 << PINB4); }
 1ae:	2c 9a       	sbi	0x05, 4	; 5
		  else{	PORTB &= ~(1 << PINB4); }
			  
	if(INPUT4){ PORTB |=  (1 << PINB5); }
		  else{	PORTB &= ~(1 << PINB5); }
 1b0:	2d 98       	cbi	0x05, 5	; 5
			  
	OCR1A = ENABLEA;
 1b2:	11 96       	adiw	r26, 0x01	; 1
 1b4:	9c 93       	st	X, r25
 1b6:	8e 93       	st	-X, r24
	OCR1B = ENABLEB; 
 1b8:	91 83       	std	Z+1, r25	; 0x01
 1ba:	80 83       	st	Z, r24
 1bc:	cf e4       	ldi	r28, 0x4F	; 79
 1be:	d3 ec       	ldi	r29, 0xC3	; 195
 1c0:	21 97       	sbiw	r28, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <main+0xf4>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0xfa>
 1c6:	00 00       	nop
		OCR1B = 0;

}
static inline void setBridgeState(uint8_t INPUT1,uint8_t INPUT2, uint8_t INPUT3, uint8_t INPUT4,uint8_t ENABLEA, uint8_t ENABLEB){

	if(INPUT1){ PORTB |=  (1 << PINB0); }
 1c8:	28 9a       	sbi	0x05, 0	; 5
		  else{	PORTB &= ~(1 << PINB0); }
			  
	if(INPUT2){ PORTB |=  (1 << PINB3); }
		  else{	PORTB &= ~(1 << PINB3); }
 1ca:	2b 98       	cbi	0x05, 3	; 5
			  
	if(INPUT3){ PORTB |=  (1 << PINB4); }
 1cc:	2c 9a       	sbi	0x05, 4	; 5
		  else{	PORTB &= ~(1 << PINB4); }
			  
	if(INPUT4){ PORTB |=  (1 << PINB5); }
		  else{	PORTB &= ~(1 << PINB5); }
 1ce:	2d 98       	cbi	0x05, 5	; 5
			  
	OCR1A = ENABLEA;
 1d0:	11 96       	adiw	r26, 0x01	; 1
 1d2:	9c 93       	st	X, r25
 1d4:	8e 93       	st	-X, r24
	OCR1B = ENABLEB; 
 1d6:	91 83       	std	Z+1, r25	; 0x01
 1d8:	80 83       	st	Z, r24
 1da:	cf e4       	ldi	r28, 0x4F	; 79
 1dc:	d3 ec       	ldi	r29, 0xC3	; 195
 1de:	21 97       	sbiw	r28, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <main+0x112>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x118>
 1e4:	00 00       	nop
		OCR1B = 0;

}
static inline void setBridgeState(uint8_t INPUT1,uint8_t INPUT2, uint8_t INPUT3, uint8_t INPUT4,uint8_t ENABLEA, uint8_t ENABLEB){

	if(INPUT1){ PORTB |=  (1 << PINB0); }
 1e6:	28 9a       	sbi	0x05, 0	; 5
		  else{	PORTB &= ~(1 << PINB0); }
			  
	if(INPUT2){ PORTB |=  (1 << PINB3); }
		  else{	PORTB &= ~(1 << PINB3); }
 1e8:	2b 98       	cbi	0x05, 3	; 5
			  
	if(INPUT3){ PORTB |=  (1 << PINB4); }
		  else{	PORTB &= ~(1 << PINB4); }
 1ea:	2c 98       	cbi	0x05, 4	; 5
			  
	if(INPUT4){ PORTB |=  (1 << PINB5); }
 1ec:	2d 9a       	sbi	0x05, 5	; 5
		  else{	PORTB &= ~(1 << PINB5); }
			  
	OCR1A = ENABLEA;
 1ee:	11 96       	adiw	r26, 0x01	; 1
 1f0:	9c 93       	st	X, r25
 1f2:	8e 93       	st	-X, r24
	OCR1B = ENABLEB; 
 1f4:	91 83       	std	Z+1, r25	; 0x01
 1f6:	80 83       	st	Z, r24
 1f8:	cf e4       	ldi	r28, 0x4F	; 79
 1fa:	d3 ec       	ldi	r29, 0xC3	; 195
 1fc:	21 97       	sbiw	r28, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <main+0x130>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0x136>
 202:	00 00       	nop
 204:	21 50       	subi	r18, 0x01	; 1
 206:	31 09       	sbc	r19, r1
			_delay_ms(25);		
			setBridgeState(1,0,0,1,32,32);
			_delay_ms(25);
		}
		
		for(int i = 0; i < 25 ; i++){
 208:	09 f0       	breq	.+2      	; 0x20c <main+0x140>
 20a:	c0 cf       	rjmp	.-128    	; 0x18c <main+0xc0>
 20c:	7b cf       	rjmp	.-266    	; 0x104 <main+0x38>

0000020e <_exit>:
 20e:	f8 94       	cli

00000210 <__stop_program>:
 210:	ff cf       	rjmp	.-2      	; 0x210 <__stop_program>
